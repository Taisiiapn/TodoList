{"version":3,"sources":["Components/Header.jsx","Components/TodoItem.jsx","Components/TodoList.jsx","Components/Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","inputValue","handleChangeValue","submitNewTodo","className","onSubmit","value","placeholder","pattern","onChange","TodoItem","id","completed","title","onChangeCompletedInput","onChangeDeleteTodo","type","toString","onClick","onDoubleClick","console","log","TodoList","todos","htmlFor","map","key","Footer","itemsLeft","footerBtns","handleFooterBtnsFilter","handleFooterBtnDeleteCompleted","length","href","App","state","originTodos","event","setState","target","preventDefault","newTodo","uuid","prevState","idTodo","newTodos","filteredIndex","filter","todo","field","filteredTodo","this","JSON","parse","localStorage","getItem","setItem","stringify","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c2ca94ba.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Header = ({ inputValue, handleChangeValue, submitNewTodo }) => (\n  <header className=\"header\">\n    <h1>todos</h1>\n\n    <form onSubmit={submitNewTodo}>\n      <input\n        className=\"new-todo\"\n        value={inputValue}\n        placeholder=\"What needs to be done?\"\n        pattern=\"[^\\s]+\"\n        onChange={handleChangeValue}\n      />\n    </form>\n  </header>\n);\n\nHeader.propTypes = {\n  inputValue: PropTypes.string,\n  handleChangeValue: PropTypes.func,\n  submitNewTodo: PropTypes.func,\n};\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TodoItem = ({ id, completed, title,\n  onChangeCompletedInput, onChangeDeleteTodo }) => (\n  <li className={completed ? 'completed' : 'view'}>\n    <div className=\"view\">\n      <input\n        type=\"checkbox\"\n        className=\"toggle\"\n        id={id}\n        completed={completed.toString()}\n        onClick={() => onChangeCompletedInput(id)} />\n\n      <label onDoubleClick={() => console.log('double click')}>\n        {title}\n      </label>\n\n      <button\n        type=\"button\"\n        className=\"destroy\"\n        id={id}\n        onClick={() => onChangeDeleteTodo(id)} />\n    </div>\n\n    <input type=\"text\" className=\"edit\" id={id} />\n\n  </li>\n);\n\nTodoItem.propTypes = {\n  todo: PropTypes.object,\n  onChangeCompletedInput: PropTypes.func,\n  onChangeDeleteTodo: PropTypes.func,\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from './TodoItem';\n\nconst TodoList = ({ todos, onChangeCompletedInput,\n  onChangeDeleteTodo }) => (\n  <section className=\"main\">\n    <input type=\"checkbox\" id=\"toggle-all\" className=\"toggle-all\" />\n    <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n    <ul className=\"todo-list\">\n\n      {todos.map(({ id, completed, title }) => (\n        <TodoItem key={id} completed={completed}\n        title={title} id={id}\n        onChangeCompletedInput={onChangeCompletedInput}\n        onChangeDeleteTodo={onChangeDeleteTodo} />\n      ))}\n\n      {/* <li className=\"editing\">\n            <div className=\"view\">\n              <input type=\"checkbox\" className=\"toggle\" id=\"todo-3\" />\n              <label htmlFor=\"todo-3\">zxcvbnm</label>\n              <button type=\"button\" className=\"destroy\" />\n            </div>\n            <input type=\"text\" className=\"edit\" />\n          </li> */}\n    </ul>\n  </section>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.array,\n  onChangeCompletedInput: PropTypes.func,\n  onChangeDeleteTodo: PropTypes.func,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Footer = ({ itemsLeft, footerBtns,\n  handleFooterBtnsFilter, handleFooterBtnDeleteCompleted }) => (\n\n  <footer className=\"footer\">\n\n    <span className=\"todo-count\">\n      {itemsLeft.length + ''} items left\n    </span>\n\n    <ul className=\"filters\">\n      <li>\n        <a href=\"#/\"\n        className={footerBtns === 'all' ? 'selected' : ''}\n        onClick={() => handleFooterBtnsFilter('all')}>\n          All\n        </a>\n      </li>\n\n      <li>\n        <a href=\"#/active\"\n        className={footerBtns === 'active' ? 'selected' : ''}\n        onClick={() => handleFooterBtnsFilter('active')}>\n          Active\n        </a>\n      </li>\n\n      <li>\n        <a href=\"#/completed\"\n        className={footerBtns === 'completed' ? 'selected' : ''}\n        onClick={() => handleFooterBtnsFilter('completed')}>\n          Completed\n        </a>\n      </li>\n    </ul>\n\n    <button type=\"button\" className=\"clear-completed\"\n    onClick={handleFooterBtnDeleteCompleted}>\n      Clear completed\n    </button>\n\n  </footer>\n\n);\n\nFooter.propTypes = {\n  itemsLeft: PropTypes.array,\n  footerBtns: PropTypes.string,\n  handleFooterBtnsFilter: PropTypes.func,\n};\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport uuid from 'react-uuid';\nimport Header from './Components/Header';\nimport TodoList from './Components/TodoList';\nimport Footer from './Components/Footer';\n\nclass App extends Component {\n  state = {\n    todos: [],\n    originTodos: [],\n    inputValue: '',\n    completed: false,\n    footerBtns: 'all',\n  }\n\n  componentDidMount() {\n    this.setState({\n      todos: JSON.parse(localStorage.getItem('todos')),\n      originTodos: JSON.parse(localStorage.getItem('originTodos')),\n    });\n  }\n\n  componentDidUpdate() {\n    const { todos, originTodos } = this.state;\n\n    localStorage.setItem('todos', JSON.stringify(todos));\n    localStorage.setItem('originTodos', JSON.stringify(originTodos));\n  }\n\n  handleChangeValue = (event) => {\n    this.setState({\n      inputValue: event.target.value,\n    });\n  }\n\n  submitNewTodo = (event) => {\n    event.preventDefault();\n\n    const newTodo = {\n      id: uuid(),\n      title: this.state.inputValue,\n      completed: this.state.completed,\n    };\n\n    if (newTodo.title) {\n      this.setState(prevState => ({\n        todos: [...prevState.todos, newTodo],\n        originTodos: [...prevState.originTodos, newTodo],\n        inputValue: '',\n      }));\n    }\n  }\n\n  onChangeCompletedInput = (idTodo) => {\n    this.setState((prevState) => {\n      const newTodos = prevState.todos\n        .map(({ id, completed }) => {\n          if (id === idTodo) {\n            completed = !completed;\n          }\n\n          return id && completed;\n        });\n\n      return {\n        todos: newTodos,\n        originTodos: newTodos,\n      };\n    });\n  }\n\n  onChangeDeleteTodo = (id) => {\n    this.setState((prevState) => {\n      const filteredIndex = prevState.todos\n        .filter(todo => todo.id !== id);\n\n      return {\n        todos: filteredIndex,\n        originTodos: filteredIndex,\n      };\n    });\n  }\n\n  handleFooterBtnsFilter = (field) => {\n    switch (field) {\n      case 'completed':\n        this.setState(prevState => ({\n          todos: prevState.originTodos\n            .filter(todo => todo.completed),\n          footerBtns: 'completed',\n        }));\n        break;\n      case 'active':\n        this.setState(prevState => ({\n          todos: prevState.originTodos\n            .filter(todo => !todo.completed),\n          footerBtns: 'active',\n        }));\n        break;\n      default:\n      case 'all':\n        this.setState(prevState => ({\n          todos: [...prevState.originTodos],\n          footerBtns: 'all',\n        }));\n        break;\n    }\n  }\n\n  handleFooterBtnDeleteCompleted = () => {\n    this.setState((prevState) => {\n      const filteredTodo = prevState.originTodos\n        .filter(todo => !todo.completed);\n\n      return {\n        todos: filteredTodo,\n        originTodos: filteredTodo,\n      };\n    });\n  }\n\n  render() {\n    const { originTodos, todos, inputValue,\n      completed, footerBtns } = this.state;\n    const itemsLeft = [...originTodos].filter(todo => !todo.completed);\n\n    return (\n      <section className=\"todoapp\">\n\n        <Header\n          todos={todos}\n          inputValue={inputValue}\n          handleChangeValue={this.handleChangeValue}\n          submitNewTodo={this.submitNewTodo}\n        />\n\n        <TodoList\n          todos={todos}\n          completed={completed}\n          onChangeCompletedInput={this.onChangeCompletedInput}\n          onChangeDeleteTodo={this.onChangeDeleteTodo}\n        />\n\n        <Footer\n          itemsLeft={itemsLeft}\n          footerBtns={footerBtns}\n          handleFooterBtnsFilter={this.handleFooterBtnsFilter}\n          handleFooterBtnDeleteCompleted={this.handleFooterBtnDeleteCompleted}\n        />\n\n      </section>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}